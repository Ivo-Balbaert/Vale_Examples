// see also tuples.vale

import stdlib.*;

exported func main() {
  arr1 = [](5, {_}); //  [0, 1, 2, 3, 4]
  // the type of arr1 is Array<mut,Â int>
  println(arr1[0]);         // => 0
  println(arr1.0);          // => 0
  set arr1[0] = 1;          
  println(arr1[0]);         // => 1
  set arr1.0 = 2;
  println(arr1[0]);         // => 2

  // size of an array:
  println(arr1.len()); // => 5

// print out all elements:
  arr2 = [](4, {_ * 2}); // [0, 2, 4, 6]
  arr2.each( { println(_); } );
// =>
// 0
// 2
// 4
// 6

// builtin foreach:
  foreach n in &arr2 { println(n); }
// =>
// 0
// 2
// 4
// 6
  foreach [ix, p] in arr2.entries() { println("On index: " + ix + " is item: " + p); }
// =>
// On index: 0 is item: 0
// On index: 1 is item: 2
// On index: 2 is item: 4
// On index: 3 is item: 6
  
  arr3 = [](4, {_ * 5}); // [0, 5, 10, 15]
  println(arr3[3]);    // => 15
  // println(arr3[4]); // at runtime => Index out of bounds! Exiting!
  // loop over the array: 
  arr3.each( { println(_); } );
 
  num = 9;
  arr4 = [](num, {_ / 2}); 
  println(arr4[5]);   // 4 / 2 => 2
  arr4.each( { print(_ + " - "); } ); // => 0 - 0 - 1 - 1 - 2 - 2 - 3 - 3 - 4 -
  println("");

  n = 2;
  m = 7;
  len =  n + m;
  arr5 = [](len, {_ / 2});
  println(arr5[6]);   // 6 / 2 => 3 

  arr6 = initArr();
  arr6.each( { print(_ + " - "); } ); // => 0 - 100 - 200 - 300 - 400 - 500 - 600 -
  println("");
}

func initArr() Array<mut, int> {
  [](7, { _ * 100 })
}

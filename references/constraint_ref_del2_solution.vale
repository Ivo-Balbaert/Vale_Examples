// Solution 1: Use a local to store the data you still need, 
// instead of a constraint ref:
struct Spaceship {
  name str;
  numWings int;
}

fn takeAndDestroy(ship Spaceship) {
  println("Name: " + ship.name);
  // Ship is destroyed here, so constraint ref is violated!
}

fn main() export {
  ship = Spaceship("Serenity", 2); // ship contains an owning ref
  // shipCRef = &ship; // don't create a constraint ref!
  // use a local to store the data:
  wings = ship.numWings;
  // Move (the ownership of) ship into a function.
  takeAndDestroy(ship);       // Name: Serenity
  println("Wings: " + wings); // => Wings: 2
}

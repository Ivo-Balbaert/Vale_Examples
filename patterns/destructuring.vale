struct Vec3 imm {
  x int;
  y int;
  z int;
}

fn makeVec() Vec3 { Vec3(3, 4, 5) }

fn main() export {
  // Without destructure pattern:
  tempVec = makeVec();
  a = tempVec.x;
  b = tempVec.y;
  c = tempVec.z;

  println("a, b and c are resp.: " + a + ", " + b +  ", " + c);
  // => a, b and c are resp.: 3, 4, 5

  // Equivalent, using a destructure:
  Vec3(d, e, f) = makeVec();

  // Equivalent; can leave off the type:
  (g, h, i) = makeVec();

  println("a: " + a); // => 3
  println("d: " + d); // => 3
  println("g: " + g); // => 3
}